plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.neige_i.go4lunch"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Retrieve Maps API key from gradle.properties file
        buildConfigField "String", "MAPS_API_KEY", MapsApiKey
        resValue "string", "MAPS_API_KEY", MapsApiKey

        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        animationsDisabled = true
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5' // streams, java.time...

    def retrofit_version = "2.9.0"
    def glide_version = "4.12.0"

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation 'androidx.lifecycle:lifecycle-livedata:2.3.1' // Transformations.distinctUntilChanged()

    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-auth:19.2.0'

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'

    implementation 'com.facebook.android:facebook-android-sdk:11.1.1'

    implementation "com.google.dagger:hilt-android:2.39.1"
    annotationProcessor 'com.google.dagger:hilt-compiler:2.39.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'android.arch.core:core-testing:1.1.1' // Helps testing LiveData
    testImplementation 'org.mockito:mockito-core:3.11.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

// JaCoCo stuff
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}